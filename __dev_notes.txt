History of Chats
    Backend

###################################    
v0.3
https://python.langchain.com/docs/how_to/message_history/
v0.2
https://python.langchain.com/v0.2/docs/how_to/qa_chat_history_how_to/

qa_prompt
input_variables=['chat_history', 'context', 'input', 'system_message']
 input_types={'chat_history': list[typing.Annotated[typing.Union[typing.Annotated[langchain_core.messages.ai.AIMessage,
 Tag(tag='ai')],
  typing.Annotated[langchain_core.messages.human.HumanMessage, Tag(tag='human')],
   typing.Annotated[langchain_core.messages.chat.ChatMessage, Tag(tag='chat')], typing.Annotated[langchain_core.messages.system.SystemMessage, Tag(tag='system')], typing.Annotated[langchain_core.messages.function.FunctionMessage, Tag(tag='function')], typing.Annotated[langchain_core.messages.tool.ToolMessage, Tag(tag='tool')], typing.Annotated[langchain_core.messages.ai.AIMessageChunk, Tag(tag='AIMessageChunk')], typing.Annotated[langchain_core.messages.human.HumanMessageChunk, Tag(tag='HumanMessageChunk')], typing.Annotated[langchain_core.messages.chat.ChatMessageChunk, Tag(tag='ChatMessageChunk')], typing.Annotated[langchain_core.messages.system.SystemMessageChunk, Tag(tag='SystemMessageChunk')], typing.Annotated[langchain_core.messages.function.FunctionMessageChunk, Tag(tag='FunctionMessageChunk')], typing.Annotated[langchain_core.messages.tool.ToolMessageChunk, Tag(tag='ToolMessageChunk')]], FieldInfo(annotation=NoneType, required=True, discriminator=Discriminator(discriminator=<function _get_type at 0x000001A070F825C0>, custom_error_type=None, custom_error_message=None, custom_error_context=None))]]} partial_variables={} messages=[SystemMessagePromptTemplate(prompt=PromptTemplate(input_variables=['context', 'system_message'], input_types={}, partial_variables={}, template="You are an assistant for question-answering tasks. Use the following pieces of retrieved context to answer the question. If you don't know the answer, say that you don't know. Answer in a {system_message} tone. \n\n{context}"), additional_kwargs={}), MessagesPlaceholder(variable_name='chat_history'), HumanMessagePromptTemplate(prompt=PromptTemplate(input_variables=['input'], input_types={}, partial_variables={}, template='{input}'), additional_kwargs={})]


/project_root
│
├── app.py                    # Main entry point for your Flask application
├── config.py                 # App configuration (e.g., secrets, API keys, DB URIs)
├── requirements.txt          # Python dependencies
├── /templates                # HTML templates (if any, for web interface)
│   └── index.html
├── /static                   # Static files (CSS, JS, images)
├── /logs                     # Log files
├── /data                     # Directory to store files (if needed)
├── /chatbots                 # Directory for individual chatbot implementations
│   ├── __init__.py           # Chatbot initialization and routing
│   ├── base_chatbot.py       # Base class for common chatbot logic
│   ├── ollama_chatbot.py     # Example implementation for Ollama chatbot
│   └── openai_chatbot.py     # Example implementation for GPT-4 or OpenAI chatbot
├── /rag                      # Retrieval-Augmented Generation (RAG) logic
│   ├── __init__.py           # Initialization of RAG module
│   ├── retriever.py          # Class for document retrieval
│   ├── vector_store.py       # Vector store implementation for storing and querying embeddings
│   └── document_store.py     # Document management, loading files
├── /auth                     # Authentication logic (Google OAuth)
│   └── google_oauth.py       # Google OAuth2 login integration
├── /database                 # Database models and session management
│   ├── __init__.py           # Database initialization
│   ├── models.py             # Database models (User, ChatMessage, etc.)
│   └── session_manager.py    # Session and user history management
└── /utils                    # Utility functions (logging, config, helper functions)
    ├── logger.py             # Logging setup
    └── config_loader.py      # Helper to load app config settings
